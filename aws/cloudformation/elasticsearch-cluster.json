{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create the auto-scaling group for running Elasticsearch",

  "Parameters": {
    "Vpc": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The VPC to place all resources into"
    },

    "Subnet1": { "Type": "AWS::EC2::Subnet::Id" },
    "Subnet2": { "Type": "AWS::EC2::Subnet::Id" },
    "Subnet3": { "Type": "AWS::EC2::Subnet::Id" },

    "EcsInstanceType" : {
      "Type" : "String",
      "Description" : "ECS EC2 instance type",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "ESConfigPath": {
      "Type": "String",
      "Description": "Path to elasticsearch config on S3. E.g., s3://my_bucket/elasticsearch.yml"
    },

    "ESBootstrapPath": {
      "Type": "String",
      "Description": "Path to a custom bootstrap file. Good for creating EBS volumes"
    },

    "MinClusterSize": {
      "Type": "Number",
      "Description": "Minimum number of active nodes in the cluster.",
      "Default": 1
    },

    "MaxClusterSize": {
      "Type": "Number",
      "Description": "Maximum number of active nodes in the cluster.",
      "Default": 6
    },

    "DesiredClusterSize": {
      "Type": "Number",
      "Description": "The desired number of nodes to have in the cluster. Acts as a default number.",
      "Default": 3
    },

    "EC2KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The key name to give to the allocated EC2s",
      "Default": ""
    },

    "PrivateFQDomain": {
      "Type": "String",
      "Description": "The Private Fully Qualified Domain Name you will use for this cluster. This will be created in Route53"
    },

    "PrivateHostedZone": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "The Private Route53 zone you are placing these resources into"
    },

    "PublicFQDomain": {
      "Type": "String",
      "Description": "The Public Fully Qualified Domain Name you will use for this cluster. This will be created in Route53"
    },

    "PublicHostedZone": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "The public Route53 zone you are placing these resources into"
    }
  },

  "Mappings" : {
    "AMI": {
      "us-east-1": { "Value": "ami-a88a46c5" },
      "us-west-1": { "Value": "ami-34a7e354" },
      "us-west-2": { "Value": "ami-ae0acdce" },
      "eu-west-1": { "Value": "ami-ccd942bf" },
      "ap-northeast-1": { "Value": "ami-4aab5d2b" },
      "ap-southeast-2": { "Value": "ami-0bf2da68" }
    }
  },
  "Resources": {
    "S3RepositoryBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private"
      }
    },

    "AccessElasticsearchSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {
       "GroupDescription" : "A group of resources that can access Elasticsesarch publicly",
       "VpcId" : { "Ref" : "Vpc" }
     }
    },

    "AccessKibanaSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {
       "GroupDescription" : "A group of resources that can access Kibana privately",
       "VpcId" : { "Ref" : "Vpc" }
     }
    },

    "PrivateElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Ports that internal resources can access on our ELB",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : 9200, "ToPort" : 9200,
            "CidrIp" : "10.0.0.0/8" },
          { "IpProtocol" : "tcp", "FromPort" : 9300, "ToPort" : 9300,
            "CidrIp" : "10.0.0.0/8" },
          { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80,
            "SourceSecurityGroupId" : { "Ref": "AccessKibanaSecurityGroup" } }
        ]
      }
    },

    "PublicElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Ports that the public can access on our ELB",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : 9200, "ToPort" : 9200,
            "SourceSecurityGroupId" : { "Ref": "AccessElasticsearchSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : 80, "ToPort" : 80,
            "SourceSecurityGroupId" : { "Ref": "AccessElasticsearchSecurityGroup" } }
        ]
      }
    },

    "EcsSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {
       "GroupDescription" : "Ports that our ELB can access of our ECS cluster.",
       "VpcId" : { "Ref" : "Vpc" },
       "SecurityGroupIngress" : [
         {
           "IpProtocol" : "tcp",
           "FromPort" : 9200,
           "ToPort" : 9200,
           "SourceSecurityGroupId" :  { "Ref" : "PrivateElbSecurityGroup" }
         }, {
           "IpProtocol" : "tcp",
           "FromPort" : 9300,
           "ToPort" : 9300,
           "SourceSecurityGroupId" :  { "Ref" : "PrivateElbSecurityGroup" }
         }, {
           "IpProtocol" : "tcp",
           "FromPort" : 5601,
           "ToPort" : 5601,
           "SourceSecurityGroupId" :  { "Ref" : "PrivateElbSecurityGroup" }
         }, {
           "IpProtocol" : "tcp",
           "FromPort" : 9200,
           "ToPort" : 9200,
           "SourceSecurityGroupId" :  { "Ref" : "PublicElbSecurityGroup" }
         }, {
           "IpProtocol" : "tcp",
           "FromPort" : 5601,
           "ToPort" : 5601,
           "SourceSecurityGroupId" :  { "Ref" : "PublicElbSecurityGroup" }
         }
       ]
      }
    },

    "EcsCluster": {
      "Type" : "AWS::ECS::Cluster"
    },

    "ElasticSearchSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Group for ES to perform self discovery within.",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 9200,
            "ToPort": 9200,
            "CidrIp": "10.0.0.0/8"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 9300,
            "ToPort": 9300,
            "CidrIp": "10.0.0.0/8"
          }
        ]
      }
    },

    "PrivateElb": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PrivateElbSecurityGroup" }, { "Ref" : "AccessKibanaSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" }],
        "CrossZone" : "true",
        "LoadBalancerName": "elasticsearch-private",
        "Scheme": "internal",
        "HealthCheck": {
          "Interval": "15",
          "Target": "TCP:9200",
          "Timeout": "5",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Listeners" : [ {
          "Protocol": "HTTP",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort" : 9200,
          "InstancePort" : 9200
        }, {
          "Protocol": "HTTP",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort" : 9300,
          "InstancePort" : 9300
        }, {
          "Protocol": "HTTP",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort" : 80,
          "InstancePort" : 5601
        }]
      }
    },

    "PublicElb": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "SecurityGroups" : [ { "Ref" : "PublicElbSecurityGroup" }, { "Ref": "AccessElasticsearchSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" }],
        "CrossZone" : "true",
        "LoadBalancerName": "elasticsearch-public",
        "Scheme": "internet-facing",
        "HealthCheck": {
          "Interval": "15",
          "Target": "TCP:9200",
          "Timeout": "5",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Listeners" : [ {
          "Protocol": "HTTP",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort" : 80,
          "InstancePort" : 5601
        }, {
          "Protocol": "HTTP",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort" : 9200,
          "InstancePort" : 9200
        }]
      }
    },

    "EcsIamInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ] },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecsInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": [ "*" ]
                }
              ]
            }
          }, {
            "PolicyName": "s3ReadOnlyAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }, {
            "PolicyName": "createEbsVolume",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AttachVolume",
                    "ec2:CreateVolume",
                    "ec2:DeleteVolume",
                    "ec2:DetachVolume",
                    "ec2:DescribeVolumes",
                    "ec2:ModifyInstanceAttribute"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }, {
            "PolicyName": "esInstanceRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeRegions",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeTags"
                  ],
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                }
              ],
              "Version": "2012-10-17"
            }
          }, {
            "PolicyName": "S3Snapshots",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Put*",
                    "s3:Get*",
                    "s3:List*",
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject"
                  ],
                  "Resource": { "Fn::Join": ["", [ "arn:aws:s3:::", { "Ref": "S3RepositoryBucket" }, "/*"]]}
                }
              ]
            }
          }
        ]
      }
    },

    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "EcsIamInstanceRole" } ]
      }
    },

    "LaunchConfiguration": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "AMI", { "Ref": "AWS::Region"}, "Value" ]},
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "AssociatePublicIpAddress" : "true",
        "IamInstanceProfile": { "Ref": "EcsInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" }, { "Ref": "AccessElasticsearchSecurityGroup" }, { "Ref": "ElasticSearchSecurityGroup" } ],
        "KeyName": { "Ref": "EC2KeyName" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref": "EcsCluster" }, " >> /etc/ecs/ecs.config\n",
            "mdkir -p /etc/elasticsearch\n",
            "yum install -y aws-cli\n",
            "aws s3 cp ", { "Ref": "ESConfigPath" }, " /etc/elasticsearch/elasticsearch.yml\n",
            "aws s3 cp ", { "Ref": "ESBootstrapPath" }, " /tmp/bootstrap.sh\n",
            "chmod +x /tmp/bootstrap.sh && touch /tmp/bootstrap.log && sh /tmp/bootstrap.sh 2>&1 /tmp/bootstrap.log\n",
            "echo cloud.aws.region: \"", { "Ref": "AWS::Region" }, "\" >> /etc/elasticsearch/elasticsearch.yml\n",
            "echo discovery.ec2.groups: \"", { "Ref": "ElasticSearchSecurityGroup" }, "\" >> /etc/elasticsearch/elasticsearch.yml\n",
            "ip=$(/sbin/ifconfig eth0|grep inet|head -1|sed 's/\\:/ /'|awk '{print $3}')\n",
            "echo network.publish_host: $ip >> /etc/elasticsearch/elasticsearch.yml"
          ] ] }
        }
      }
    },

    "SearchAsg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" } ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "MinSize" : { "Ref": "MinClusterSize" },
        "MaxSize" : { "Ref": "MaxClusterSize" },
        "DesiredCapacity" : { "Ref": "DesiredClusterSize" },
        "Cooldown": "60",
        "LoadBalancerNames": [ { "Ref": "PrivateElb" }, { "Ref": "PublicElb" } ],
        "TerminationPolicies": [ "OldestInstance", "Default" ]
      }
    },

    "PublicDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "PublicElb", "DNSName" ] },
          "EvaluateTargetHealth": false,
          "HostedZoneId": { "Fn::GetAtt": ["PublicElb", "CanonicalHostedZoneNameID"] }
        },
        "HostedZoneId": { "Ref": "PublicHostedZone" },
        "Name": { "Ref": "PublicFQDomain" },
        "Type": "A"
      }
    },

    "PrivateDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "PrivateElb", "DNSName" ] },
          "EvaluateTargetHealth": false,
          "HostedZoneId": { "Fn::GetAtt": ["PrivateElb", "CanonicalHostedZoneNameID"] }
        },
        "HostedZoneId": { "Ref": "PrivateHostedZone" },
        "Name": { "Ref": "PrivateFQDomain" },
        "Type": "A"
      }
    }
  }
}
