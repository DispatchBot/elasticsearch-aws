{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Create the auto-scaling group for running Elasticsearch",

  "Parameters": {
    "Vpc": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The VPC to place all resources into"
    },

    "PrivateSubnet1": { "Type": "AWS::EC2::Subnet::Id" },
    "PrivateSubnet2": { "Type": "AWS::EC2::Subnet::Id" },
    "PrivateSubnet3": { "Type": "AWS::EC2::Subnet::Id" },

   "ELBSecurityPolicyName": {
     "Type": "String",
     "Description": "Name of the SSL/Cipher policy to use for the ELB SSL",
     "Default": "ELBSecurityPolicy-TLS-1-2-2017-01"
   },

    "EcsInstanceType" : {
      "Type" : "String",
      "Description" : "ECS EC2 instance type",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "MinClusterSize": {
      "Type": "Number",
      "Description": "Minimum number of active nodes in the cluster.",
      "Default": 3
    },

    "MaxClusterSize": {
      "Type": "Number",
      "Description": "Maximum number of active nodes in the cluster.",
      "Default": 10
    },

    "DesiredClusterSize": {
      "Type": "Number",
      "Description": "The desired number of nodes to have in the cluster. Acts as a default number.",
      "Default": 5
    },

    "EC2KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The key name to give to the allocated EC2s",
      "Default": ""
    },

    "PrivateFQDomain": {
      "Type": "String",
      "Description": "The Private Fully Qualified Domain Name you will use for this cluster. This will be created in Route53"
    },

    "PrivateHostedZone": {
      "Type": "AWS::Route53::HostedZone::Id",
      "Description": "The Private Route53 zone you are placing these resources into"
    },

    "VolumeSize": {
      "Type": "Number",
      "Description": "Size of EBS data volume in GB"
    },

    "Certificate": {
      "Type": "String",
      "Description": "The ARN of the SSL cert to use with the ELB"
    },

    "ElbS3LoggingBucket": {
      "Type": "String",
      "Description": "The name of the S3 bucket to push ELB logs to"
    },

    "Tenancy": {
      "Type": "String",
      "Description": "The allowed tenancy of instances launched",
      "Default": "default",
      "AllowedValues": [ "default", "dedicated" ]
    }
  },

  "Mappings" : {
    "AMI": {
      "us-west-2": { "Value": "ami-01c52ef1a99946f59" },
      "us-east-2": { "Value": "ami-0bdac1933dbdac310" }
    },
    "Ec2Endpoint": {
      "us-west-2": { "Value": "ec2.us-west-2.amazonaws.com" },
      "us-east-2": { "Value": "ec2.us-east-2.amazonaws.com" }
    }
  },

  "Resources": {
    "S3RepositoryBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private"
      }
    },

    "AccessElasticsearchSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "A group of resources that can access Elasticsesarch",
        "VpcId" : { "Ref" : "Vpc" }
      }
    },

    "PrivateElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Ports that internal resources can access on our ELB",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : 9200, "ToPort" : 9200,
            "SourceSecurityGroupId" : { "Ref": "AccessElasticsearchSecurityGroup" } },
          { "IpProtocol" : "tcp", "FromPort" : 9200, "ToPort" : 9200,
            "SourceSecurityGroupId" : { "Ref": "ElasticSearchSecurityGroup" } }
        ]
      }
    },

    "EcsSecurityGroup" : {
     "Type" : "AWS::EC2::SecurityGroup",
     "Properties" : {
       "GroupDescription" : "Ports that our ELB can access of our ECS cluster.",
       "VpcId" : { "Ref" : "Vpc" },
       "SecurityGroupIngress" : [
         {
           "IpProtocol" : "tcp",
           "FromPort" : 9200,
           "ToPort" : 9200,
           "SourceSecurityGroupId" :  { "Ref" : "PrivateElbSecurityGroup" }
         }
       ]
      }
    },

    "EcsCluster": {
      "Type" : "AWS::ECS::Cluster"
    },

    "ElasticSearchSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Group for ES to perform self discovery within.",
        "VpcId" : { "Ref" : "Vpc" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 9300,
            "ToPort": 9300,
            "CidrIp": "10.0.0.0/16"
          }
        ]
      }
    },

    "PrivateElb": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AccessLoggingPolicy": {
          "EmitInterval": 60,
          "Enabled": true,
          "S3BucketName": { "Ref": "ElbS3LoggingBucket" },
          "S3BucketPrefix": { "Fn::Join": ["/", [ { "Ref": "AWS::StackName" }, "elb"]] }
        },
        "SecurityGroups" : [ { "Ref" : "PrivateElbSecurityGroup" }, { "Ref" : "AccessElasticsearchSecurityGroup" } ],
        "Subnets" : [{ "Ref" : "PrivateSubnet1" }, { "Ref" : "PrivateSubnet2" }, { "Ref" : "PrivateSubnet3" }],
        "CrossZone" : "true",
        "LoadBalancerName": { "Ref": "AWS::StackName" },
        "Scheme": "internal",
        "HealthCheck": {
          "Interval": "15",
          "Target": "HTTPS:9200/",
          "Timeout": "5",
          "UnhealthyThreshold": "2",
          "HealthyThreshold": "2"
        },
        "Listeners" : [ {
          "Protocol": "HTTPS",
          "InstanceProtocol": "HTTPS",
          "LoadBalancerPort" : 9200,
          "InstancePort" : 9200,
          "SSLCertificateId": { "Ref": "Certificate"},
          "PolicyNames": [ { "Ref": "ELBSecurityPolicyName" } ]
        }],
        "Policies": [
          {
            "PolicyName": "ELBSSLSecurityPolicy",
            "PolicyType": "SSLNegotiationPolicyType",
            "Attributes": [
              {
                "Name": "Reference-Security-Policy",
                "Value": { "Ref": "ELBSecurityPolicyName" }
              }
            ]
          },
          {
            "PolicyName": "MyPublicKeyPolicy",
            "PolicyType": "PublicKeyPolicyType",
            "Attributes": [
              {
                "Name": "PublicKey",
                "Value": {
                  "Fn::Join": [
                    "\n",
                    [
                      "MIIGAjCCA+qgAwIBAgICEAIwDQYJKoZIhvcNAQELBQAwgZAxCzAJBgNVBAYTAlVT",
                      "MRMwEQYDVQQIDApXYXNoaW5ndG9uMRQwEgYDVQQKDAtEaXNwYXRjaEJvdDEMMAoG",
                      "A1UECwwDT3BzMSQwIgYDVQQDDBtEaXNwYXRjaEJvdCBJbnRlcm1lZGlhdGUgQ0Ex",
                      "IjAgBgkqhkiG9w0BCQEWE29wc0BkaXNwYXRjaGJvdC5jb20wHhcNMTkxMjEyMTYx",
                      "NzU1WhcNMjExMjIxMTYxNzU1WjCBlTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAldB",
                      "MRAwDgYDVQQHDAdTZWF0dGxlMRQwEgYDVQQKDAtEaXNwYXRjaEJvdDEMMAoGA1UE",
                      "CwwDT3BzMR8wHQYDVQQDDBYqLmRpc3BhdGNoYm90LmludGVybmFsMSIwIAYJKoZI",
                      "hvcNAQkBFhNvcHNAZGlzcGF0Y2hib3QuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOC",
                      "AQ8AMIIBCgKCAQEAwb88ODsEHz2f5wqzecH02Ud3PiwJkMCQBXtlqFcyejnq/y+e",
                      "ga0kRAbq4Yrk9wGK30tc7+js1WClFVy16nr49+g6FM6ZH9gAU45njhO5wzzs6D6r",
                      "PU1i+JqWa2QDF1c/IkspcAH7qIX7JfkHfo9PiuONpH/Xo4nmA2hi7NX/PKtVsptU",
                      "N6oLTjabvZe3Qex2d4qQYusQCoXBjuQMiIzPtzpPFxGHs6PIrGWhzNKv7G2Ik2aA",
                      "jeDSqPhrv0VLN4ijI9jN+ujM5qEfWFjwyjqBc/1JcxkLqjqfdLM9eDyAHOOtEIxv",
                      "DgeJ5gzCygkqNprKo5BPO9YAzqZYYW5CqcATlQIDAQABo4IBXTCCAVkwCQYDVR0T",
                      "BAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZIAYb4QgENBCYWJE9wZW5TU0wg",
                      "R2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU0PSc8SvSNj6/",
                      "RFQdq3W6/x6p3k0wgb8GA1UdIwSBtzCBtIAUU65av3pAME8J6OgPL/5rC0ZB7kuh",
                      "gZekgZQwgZExCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApXYXNoaW5ndG9uMRQwEgYD",
                      "VQQKDAtEaXNwYXRjaEJvdDEMMAoGA1UECwwDT3BzMSUwIwYDVQQDDBxEaXNwYXRj",
                      "aEJvdCBJbnRlcm5hbCBSb290IENBMSIwIAYJKoZIhvcNAQkBFhNvcHNAZGlzcGF0",
                      "Y2hib3QuY29tggIQADAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUH",
                      "AwEwDQYJKoZIhvcNAQELBQADggIBALFpzNj1DAQBY38LDgw4wGPpq2jQqT5wfOjv",
                      "sz4y1W1hBGUexIB0/bmW2DwFYCyk/KIAH+GpyzckXve0mLjs9Umsjaq+DaNe/vwL",
                      "MVDoqAaXQKyzhdRz37DBMZ8vWZ0YFHaAS9meA/TSBaGqkH5Uu2MP8rIw6G+wnmtJ",
                      "JG9IBva8L0bv7otMJsEmgZlOcuMsEy8Y6zZa+0IUAHPlhKNNbKNrvHa9EZ3oFBfn",
                      "lDulxSBOc4n6WBP9p+05Z18QCjFaPml4pICOyEoswaGZSa93Wzb3X8D0V/rjjYXE",
                      "66/83CMDG6W3pGaZhcJQovh6ixMtdzSqO15Xo8CPzfthDYqfBhI9mRC0PzQiN9pG",
                      "VLSc4gdGvJyQvg75PGZuFCecgNDgWja75ZIRrbKtQgp2QACKyiQ9fISNqA5X7icO",
                      "sJHs/yDmqW/hJ2A0voCXKxfglys5Yu50H6KIifd62odrBIWCvV4uJADWs+ZSkomS",
                      "CWpqq0W/uKxV/CqWOCno9ICGQR9dsW0jQMfj/HHZhtMFe448X1D1ooGNAq1w91Zb",
                      "62S4Dg7OdPVTuvnaDR7Lcft3DBdZkphnCLNHhdDw0at3hJJb8+xnfJ0WAI7u34/F",
                      "py8Rev2zeTk5p1hd3Ln30Xrhze6bVahUxrvSVHwthbFsrJa4ov8TGKIAVyXZi3kJ",
                      "B/UPksZ6"
                    ]
                  ]
                }
              }
            ]
          },
          {
            "PolicyName": "MyBackendServerAuthenticationPolicy",
            "PolicyType": "BackendServerAuthenticationPolicyType",
            "Attributes": [
              {
                "Name": "PublicKeyPolicyName",
                "Value": "MyPublicKeyPolicy"
              }
            ],
            "InstancePorts": [ "443" ]
          }
        ]
      }
    },

    "EcsIamInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [ "ec2.amazonaws.com" ]
              },
              "Action": [ "sts:AssumeRole" ]
            }
          ] },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "ecsInstanceRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll"
                  ],
                  "Resource": [ "*" ]
                }
              ]
            }
          }, {
            "PolicyName": "esInstanceRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "ec2:DescribeInstances",
                    "ec2:DescribeAvailabilityZones",
                    "ec2:DescribeRegions",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeTags"
                  ],
                  "Effect": "Allow",
                  "Resource": [ "*" ]
                }
              ],
              "Version": "2012-10-17"
            }
          }, {
            "PolicyName": "S3Snapshots",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Put*",
                    "s3:Get*",
                    "s3:List*",
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject"
                  ],
                  "Resource": { "Fn::Join": ["", [ "arn:aws:s3:::", { "Ref": "S3RepositoryBucket" }, "/*"]]}
                }, {
                  "Effect": "Allow",
                  "Action": [
                    "s3:Put*",
                    "s3:Get*",
                    "s3:List*",
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject"
                  ],
                  "Resource": { "Fn::Join": ["", [ "arn:aws:s3:::", { "Ref": "S3RepositoryBucket" }]]}
                }
              ]
            }
          }
        ]
      }
    },

    "EcsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "EcsIamInstanceRole" } ]
      }
    },

    "LaunchConfiguration": {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "AMI", { "Ref": "AWS::Region"}, "Value" ]},
        "InstanceType" : { "Ref" : "EcsInstanceType" },
        "InstanceMonitoring": false,
        "AssociatePublicIpAddress" : "false",
        "PlacementTenancy": { "Ref": "Tenancy" },
        "IamInstanceProfile": { "Ref": "EcsInstanceProfile" },
        "SecurityGroups" : [ { "Ref" : "EcsSecurityGroup" }, { "Ref": "ElasticSearchSecurityGroup" } ],
        "KeyName": { "Ref": "EC2KeyName" },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdh",
            "Ebs": {
              "DeleteOnTermination": "true",
              "Encrypted": "true",
              "VolumeSize": { "Ref": "VolumeSize" },
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
            "#!/bin/bash\n",
            "echo ECS_CLUSTER=", { "Ref": "EcsCluster" }, " >> /etc/ecs/ecs.config\n",

            "mkfs -t ext4 /dev/xvdh\n",
            "mkdir -p /esdata\n",
            "mount /dev/xvdh /esdata\n",
            "echo \"/dev/xvdh  /esdata  ext4  defaults,nofail  0  2\\n\" >> /etc/fstab\n",
            "chown -R 1000:1000 /esdata\n",

            "echo discovery.ec2.endpoint: \"", { "Fn::FindInMap" : [ "Ec2Endpoint", { "Ref": "AWS::Region"}, "Value" ]}, "\" >> /etc/elasticsearch/elasticsearch.yml\n",
            "echo discovery.ec2.groups: \"", { "Ref": "ElasticSearchSecurityGroup" }, "\" >> /etc/elasticsearch/elasticsearch.yml\n",
            "ip=$(/sbin/ifconfig eth0|grep inet|head -1|sed 's/:/ /'|awk '{print $2}')\n",
            "echo network.publish_host: $ip >> /etc/elasticsearch/elasticsearch.yml\n",
            "service docker stop || true\n",
            "service docker start\n",
            "systemctl enable --now --no-block ecs.service"
          ] ] }
        }
      }
    },

    "SearchAsg" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [ { "Ref" : "PrivateSubnet1" }, { "Ref" : "PrivateSubnet2" }, { "Ref" : "PrivateSubnet3" } ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "MinSize" : { "Ref": "MinClusterSize" },
        "MaxSize" : { "Ref": "MaxClusterSize" },
        "DesiredCapacity" : { "Ref": "DesiredClusterSize" },
        "Cooldown": "60",
        "LoadBalancerNames": [ { "Ref": "PrivateElb" } ],
        "TerminationPolicies": [ "OldestInstance", "Default" ]
      }
    },

    "PrivateDNS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "AliasTarget": {
          "DNSName": { "Fn::GetAtt": [ "PrivateElb", "DNSName" ] },
          "EvaluateTargetHealth": false,
          "HostedZoneId": { "Fn::GetAtt": ["PrivateElb", "CanonicalHostedZoneNameID"] }
        },
        "HostedZoneId": { "Ref": "PrivateHostedZone" },
        "Name": { "Ref": "PrivateFQDomain" },
        "Type": "A"
      }
    }
  }
}
